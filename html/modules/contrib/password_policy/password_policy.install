<?php

/**
 * @file
 * Install, update and uninstall functions for the password_policy module.
 */

use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_install().
 */
function password_policy_install() {
  // Set user password reset timestamp to now.
  $timestamp = \Drupal::service("date.formatter")->format(\Drupal::time()->getRequestTime(), "custom", DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
  /** @var \Drupal\user\UserInterface[] $users */
  $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple();
  // @todo Get rid of updating all users.
  foreach ($users as $user) {
    if ($user->getAccountName() == NULL) {
      continue;
    }
    $user
      ->set('field_last_password_reset', $timestamp)
      ->set('field_password_expiration', '0')
      ->save();
  }

  // Rebuild user entity form display for new fields.
  $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $user_form_display */
  $user_form_display = $storage->load('user.user.default');
  if (!$user_form_display) {
    $user_form_display = $storage->create([
      'targetEntityType' => 'user',
      'bundle' => 'user',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }
  $user_form_display
    ->setComponent('field_last_password_reset', [
      'type' => 'datetime_default',
      // Display before contact standard profile field.
      'weight' => 4,
      'settings' => [],
    ])
    ->setComponent('field_password_expiration', [
      'type' => 'boolean_checkbox',
      'weight' => 3,
      'settings' => ['display_label' => TRUE],
    ])
    ->save();
}

/**
 * Add cron threshold to prevent memory overloads.
 */
function password_policy_update_8201() {
  $config = \Drupal::service('config.factory')->getEditable('password_policy.settings');

  // Set and save new message value.
  $config->set('cron_threshold', '250')->save();
}
